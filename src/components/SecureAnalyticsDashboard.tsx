import React, { useState, useEffect } from 'react';import { secureAnalyticsService } from '../services/secureAnalyticsService';import type { SecureAnalyticsData } from '../services/secureAnalyticsService';import './SecureAnalyticsDashboard.css';interface SecureAnalyticsDashboardProps {  isVisible: boolean;  onClose: () => void;}const SecureAnalyticsDashboard: React.FC<SecureAnalyticsDashboardProps> = ({ isVisible, onClose }) => {  const [isAuthenticated, setIsAuthenticated] = useState(false);  const [password, setPassword] = useState('');  const [analytics, setAnalytics] = useState<SecureAnalyticsData | null>(null);  const [authError, setAuthError] = useState('');  const [isLoading, setIsLoading] = useState(false);  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);  useEffect(() => {    if (isVisible) {      // Check if already authenticated      const alreadyAuth = secureAnalyticsService.isAuthenticatedUser();      if (alreadyAuth) {        setIsAuthenticated(true);        loadAnalytics();        setupAutoRefresh();      }    } else {      cleanup();    }    return cleanup;  }, [isVisible]);  const cleanup = () => {    if (refreshInterval) {      clearInterval(refreshInterval);      setRefreshInterval(null);    }  };  const setupAutoRefresh = () => {    const interval = setInterval(loadAnalytics, 30000); // Refresh every 30 seconds    setRefreshInterval(interval);  };  const handleLogin = async (e: React.FormEvent) => {    e.preventDefault();    setIsLoading(true);    setAuthError('');    try {      const success = secureAnalyticsService.authenticate(password);      if (success) {        setIsAuthenticated(true);        setPassword('');        await loadAnalytics();        setupAutoRefresh();      } else {        setAuthError('Falsches Passwort');      }    } catch (error) {      setAuthError('Authentifizierungsfehler');    } finally {      setIsLoading(false);    }  };  const handleLogout = () => {    secureAnalyticsService.logout();    setIsAuthenticated(false);    setAnalytics(null);    cleanup();  };  const loadAnalytics = async () => {    try {      const data = await secureAnalyticsService.getSecureAnalytics();      setAnalytics(data);    } catch (error) {      console.error('Fehler beim Laden der Analytics-Daten:', error);    }  };  const formatDuration = (ms: number): string => {    const minutes = Math.floor(ms / 60000);    const seconds = Math.floor((ms % 60000) / 1000);    if (minutes > 60) {      const hours = Math.floor(minutes / 60);      const remainingMinutes = minutes % 60;      return `${hours}h ${remainingMinutes}m`;    }    return `${minutes}m ${seconds}s`;  };  const formatDate = (dateString: string): string => {    const date = new Date(dateString);    return date.toLocaleDateString('de-DE', {       day: '2-digit',       month: '2-digit'     });  };  const exportData = () => {    const data = secureAnalyticsService.exportSecureData();    if (data) {      const blob = new Blob([data], { type: 'application/json' });      const url = URL.createObjectURL(blob);      const a = document.createElement('a');      a.href = url;      a.download = `iphigenie-secure-analytics-${new Date().toISOString().split('T')[0]}.json`;      document.body.appendChild(a);      a.click();      document.body.removeChild(a);      URL.revokeObjectURL(url);    }  };  const clearData = () => {    if (confirm('Sind Sie sicher, dass Sie alle Analytics-Daten l√∂schen m√∂chten? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.')) {      const success = secureAnalyticsService.clearAllData();      if (success) {        setAnalytics(null);        loadAnalytics();        alert('Alle Daten wurden erfolgreich gel√∂scht.');      }    }  };  if (!isVisible) return null;  // Login Form  if (!isAuthenticated) {    return (      <div className="analytics-overlay">        <div className="analytics-login">          <div className="login-header">            <h2>üîê Analytics Login</h2>            <button className="close-btn" onClick={onClose}>‚úï</button>          </div>          <form onSubmit={handleLogin} className="login-form">            <div className="form-group">              <label htmlFor="password">Passwort eingeben:</label>              <input                type="password"                id="password"                value={password}                onChange={(e) => setPassword(e.target.value)}                placeholder="Analytics-Passwort"                disabled={isLoading}                autoFocus              />            </div>            {authError && <div className="auth-error">{authError}</div>}            <div className="form-actions">              <button                 type="submit"                 disabled={isLoading || !password.trim()}                className="login-btn"              >                {isLoading ? 'Authentifiziere...' : 'Anmelden'}              </button>            </div>          </form>        </div>      </div>    );  }  // Main Dashboard  if (!analytics) {    return (      <div className="analytics-overlay">        <div className="analytics-dashboard">          <div className="analytics-header">            <h2>üìä Secure Analytics</h2>            <button className="close-btn" onClick={onClose}>‚úï</button>          </div>          <div className="loading-state">            <div className="loading-spinner"></div>            <p>Lade Analytics-Daten...</p>          </div>        </div>      </div>    );  }  // Prepare chart data (last 7 days)  const last7Days = Object.entries(analytics.dailyStats)    .slice(0, 7)    .reverse()    .map(([date, stats]) => ({      date: formatDate(date),      sessions: stats.sessions,      events: stats.events    }));  const maxValue = Math.max(...last7Days.map(d => Math.max(d.sessions, d.events)), 1);  return (    <div className="analytics-overlay">      <div className="analytics-dashboard">        <div className="analytics-header">          <h2>üîê Secure Analytics Dashboard</h2>          <div className="header-actions">            <span className="auth-status">‚úÖ Authentifiziert</span>            <button className="logout-btn" onClick={handleLogout}>Abmelden</button>            <button className="close-btn" onClick={onClose}>‚úï</button>          </div>        </div>        <div className="analytics-content">          {/* Key Metrics */}          <div className="metrics-grid">            <div className="metric-card">              <div className="metric-value">{analytics.totalSessions}</div>              <div className="metric-label">Sessions (30 Tage)</div>            </div>            <div className="metric-card">              <div className="metric-value">{analytics.uniqueUsers}</div>              <div className="metric-label">Einzigartige Nutzer</div>            </div>            <div className="metric-card">              <div className="metric-value">{analytics.sessionsToday}</div>              <div className="metric-label">Sessions Heute</div>            </div>            <div className="metric-card">              <div className="metric-value">{formatDuration(analytics.averageSessionDuration)}</div>              <div className="metric-label">√ò Session-Dauer</div>            </div>            <div className="metric-card">              <div className="metric-value">{analytics.bounceRate.toFixed(1)}%</div>              <div className="metric-label">Absprungrate</div>            </div>            <div className="metric-card realtime">              <div className="metric-value">{analytics.realTimeUsers}</div>              <div className="metric-label">üî¥ Live Nutzer</div>            </div>          </div>          {/* Charts */}          <div className="charts-grid">            {/* Sessions Chart */}            <div className="chart-section">              <h3>Sessions & Events (letzte 7 Tage)</h3>              <div className="dual-chart">                {last7Days.map((day, index) => (                  <div key={index} className="chart-bar-group">                    <div                       className="chart-bar sessions"                      style={{                         height: `${(day.sessions / maxValue) * 100}%`,                        minHeight: day.sessions > 0 ? '4px' : '2px'                      }}                      title={`${day.date}: ${day.sessions} Sessions`}                    />                    <div                       className="chart-bar events"                      style={{                         height: `${(day.events / maxValue) * 100}%`,                        minHeight: day.events > 0 ? '4px' : '2px'                      }}                      title={`${day.date}: ${day.events} Events`}                    />                    <div className="chart-label">{day.date}</div>                    <div className="chart-values">                      <span className="sessions-value">{day.sessions}</span>                      <span className="events-value">{day.events}</span>                    </div>                  </div>                ))}              </div>              <div className="chart-legend">                <span className="legend-item sessions">Sessions</span>                <span className="legend-item events">Events</span>              </div>            </div>            {/* Hourly Distribution */}            <div className="chart-section">              <h3>St√ºndliche Verteilung</h3>              <div className="hourly-chart">                {analytics.hourlyDistribution.map((hour, index) => {                  const maxHourly = Math.max(...analytics.hourlyDistribution.map(h => h.sessions), 1);                  return (                    <div key={index} className="hour-bar">                      <div                         className="hour-value"                        style={{ height: `${(hour.sessions / maxHourly) * 100}%` }}                        title={`${hour.hour}:00 - ${hour.sessions} Sessions`}                      />                      <div className="hour-label">{hour.hour}</div>                    </div>                  );                })}              </div>            </div>          </div>          {/* Device & Referrer Stats */}          <div className="stats-grid">            <div className="stats-section">              <h3>Ger√§tetypen</h3>              <div className="stats-list">                {Object.entries(analytics.deviceTypes)                  .sort(([,a], [,b]) => b - a)                  .map(([device, count]) => (                    <div key={device} className="stats-item">                      <span className="stats-name">{device}</span>                      <span className="stats-value">{count}</span>                      <div                         className="stats-bar"                        style={{                           width: `${(count / Math.max(...Object.values(analytics.deviceTypes))) * 100}%`                         }}                      />                    </div>                  ))}              </div>            </div>            <div className="stats-section">              <h3>Top Referrer</h3>              <div className="stats-list">                {Object.entries(analytics.referrers)                  .sort(([,a], [,b]) => b - a)                  .slice(0, 5)                  .map(([referrer, count]) => (                    <div key={referrer} className="stats-item">                      <span className="stats-name">{referrer}</span>                      <span className="stats-value">{count}</span>                      <div                         className="stats-bar"                        style={{                           width: `${(count / Math.max(...Object.values(analytics.referrers))) * 100}%`                         }}                      />                    </div>                  ))}              </div>            </div>          </div>          {/* Popular Features */}          <div className="features-section">            <h3>Beliebteste Features</h3>            <div className="features-grid">              {analytics.popularFeatures.slice(0, 8).map((feature, index) => (                <div key={index} className="feature-card">                  <div className="feature-name">{feature.feature}</div>                  <div className="feature-usage">{feature.usage}x</div>                </div>              ))}            </div>          </div>          {/* Actions */}          <div className="analytics-actions">            <button className="action-btn primary" onClick={loadAnalytics}>              üîÑ Aktualisieren            </button>            <button className="action-btn secondary" onClick={exportData}>              üíæ Daten exportieren            </button>            <button className="action-btn danger" onClick={clearData}>              üóëÔ∏è Alle Daten l√∂schen            </button>          </div>        </div>      </div>    </div>  );};export default SecureAnalyticsDashboard;