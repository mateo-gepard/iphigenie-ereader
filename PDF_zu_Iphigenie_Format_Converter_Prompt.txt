# PDF zu Iphigenie-Reader Format Konverter

You are a PDF-to-TypeScript converter specifically designed for Goethe's "Iphigenie auf Tauris". Your task is to convert a PDF of the drama into a structured TypeScript format that can be used by a React e-reader application.

## Python Implementation Plan

### üêç **Python-L√∂sung: "Iphigenie PDF Parser"**

#### **üìÅ Projektstruktur**
```
iphigenie-pdf-parser/
‚îú‚îÄ‚îÄ main.py                 # Hauptskript
‚îú‚îÄ‚îÄ pdf_extractor.py        # PDF ‚Üí Rohtext
‚îú‚îÄ‚îÄ text_parser.py          # Struktur-Erkennung
‚îú‚îÄ‚îÄ footnote_cleaner.py     # Fu√ünoten-Separation
‚îú‚îÄ‚îÄ typescript_exporter.py  # TypeScript-Format
‚îú‚îÄ‚îÄ validators.py           # Qualit√§tskontrolle
‚îú‚îÄ‚îÄ config.py              # Konfiguration & Regex-Patterns
‚îî‚îÄ‚îÄ requirements.txt       # Dependencies
```

#### **üîß Dependencies (requirements.txt)**
```txt
pdfplumber==0.9.0
pandas==2.0.3
regex==2023.8.8
click==8.1.7
rich==13.5.2
```

#### **üìã Schritt-f√ºr-Schritt Pipeline**

**Phase 1: PDF-Extraktion (`pdf_extractor.py`)**
```python
def extract_text_from_pdf(pdf_path):
    # 1. Seitenweise Extraktion mit pdfplumber
    # 2. Erhaltung von Zeilennummern
    # 3. Metadaten sammeln (Seitenzahlen)
    # Output: Liste von Text-Bl√∂cken
```

**Phase 2: Struktur-Erkennung (`text_parser.py`)**
```python
def parse_drama_structure(raw_text):
    # 1. Akt-Erkennung: "ERSTER AUFZUG", "ZWEITER AUFZUG"
    # 2. Szenen-Erkennung: "ERSTER AUFTRITT", "ZWEITER AUFTRITT"
    # 3. Sprecher-Erkennung: "IPHIGENIE", "THOAS", "OREST"
    # 4. Vers-Nummerierung: Fortlaufende Z√§hlung
    # Output: Hierarchische Struktur
```

**Phase 3: Fu√ünoten-Bereinigung (`footnote_cleaner.py`)**
```python
def separate_footnotes_from_verses(text_blocks):
    # Regex-Patterns f√ºr Fu√ünoten:
    FOOTNOTE_PATTERNS = [
        r'\d+\s+\w+:\s+.*',        # "16 Gram: Kummer"
        r'vgl\.\s+Anm\.\s+zu',     # "vgl. Anm. zu V."
        r'\d+\s+[A-Z][a-z]+:',     # Nummerierte Erkl√§rungen
    ]
    # Output: Saubere Verse + separierte Fu√ünoten
```

**Phase 4: Validierung (`validators.py`)**
```python
def validate_structure(parsed_data):
    # 1. Akt-Vollst√§ndigkeit (5 Akte?)
    # 2. Szenen-Konsistenz
    # 3. Vers-Nummerierung (keine L√ºcken?)
    # 4. Sprecher-Namen (standardisiert?)
    # Output: Validation-Report + Korrekturen
```

**Phase 5: TypeScript-Export (`typescript_exporter.py`)**
```python
def export_to_typescript(validated_data):
    # 1. JSON-Struktur erstellen
    # 2. TypeScript-Interfaces generieren
    # 3. Formatierte .ts Datei schreiben
    # Output: iphigenieText.ts f√ºr React-App
```

#### **üéØ Regex-Patterns (config.py)**
```python
# Struktur-Erkennung
ACT_PATTERN = r'^(ERSTER|ZWEITER|DRITTER|VIERTER|F√úNFTER)\s+AUFZUG'
SCENE_PATTERN = r'^(ERSTER|ZWEITER|DRITTER|VIERTER|F√úNFTER|SECHSTER)\s+AUFTRITT'
SPEAKER_PATTERN = r'^([A-Z]{4,})\s*\.'

# Fu√ünoten-Erkennung
FOOTNOTE_MAIN = r'(\d{1,4})\s+([A-Za-z√§√∂√º√Ñ√ñ√ú√ü]+):\s*([^0-9]*?)(?=\s+\d{1,4}\s+\w+:|$)'
REFERENCE_PATTERN = r'vgl\.\s+Anm\.\s+zu\s+V\.\s*\d+'

# Vers-Bereinigung
VERSE_CLEANUP = [
    r'^\d+\s*',              # Zeilennummern entfernen
    r'\[\d+\]',              # Referenzen entfernen
    r'\s+', ' '              # Mehrfache Leerzeichen
]
```

#### **üöÄ Hauptskript (main.py)**
```python
import click
from rich.console import Console

@click.command()
@click.argument('pdf_path', type=click.Path(exists=True))
@click.option('--output', '-o', default='iphigenieText.ts')
@click.option('--validate', '-v', is_flag=True)
def convert_pdf_to_typescript(pdf_path, output, validate):
    """
    Konvertiert Iphigenie PDF zu TypeScript-Format
    """
    console = Console()
    
    # Pipeline ausf√ºhren
    with console.status("PDF wird verarbeitet..."):
        # 1. PDF extrahieren
        # 2. Struktur parsen  
        # 3. Fu√ünoten bereinigen
        # 4. Validieren (optional)
        # 5. TypeScript exportieren
        
    console.print("‚úÖ Konvertierung abgeschlossen!")
```

#### **‚ö° Usage**
```bash
# Installation
pip install -r requirements.txt

# Konvertierung
python main.py iphigenie.pdf --output clean_iphigenie.ts --validate
```

## Target TypeScript Structure

```typescript
export interface Verse {
  id: string;
  text: string;
  lineNumber: number;
}

export interface Stanza {
  id: string;
  title: string; // Speaker name like "IPHIGENIE", "THOAS"
  verses: Verse[];
  act: number;
  scene: number;
}

export interface Scene {
  id: string;
  title: string; // Like "ERSTER AUFTRITT", "ZWEITER AUFTRITT"
  number: number;
  stanzas: Stanza[];
}

export interface Act {
  id: string;
  title: string; // Like "ERSTER AUFZUG", "ZWEITER AUFZUG"
  number: number;
  scenes: Scene[];
}

export const iphigenieText: Act[] = [...]
```

## Expected Result
A clean, structured TypeScript file without footnote chaos, ready for React e-reader integration!
